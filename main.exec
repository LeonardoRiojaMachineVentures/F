use std::ops::Div;
use std::ops::Mul;

#[derive(Debug)]
struct User {
	age : u8,
	gender : Gender,
	height : u16,
	weight : f64,
	fat_percentage : f64,
	bmi : BMI,
	fat_group : Option<FatGroup>,
	cardiovascular_risk : Option<CardiovascularRisk>,
	waist : Option<f64>,
	hip : Option<f64>,
	age_group : AgeGroup,
}

#[derive(Debug)]
struct Input {
	age : u8,
	gender : Gender,
	height : u16,
	weight : f64,
	fat_percentage : u8,
	waist : Option<f64>,
	hip : Option<f64>,
}
impl Input {
	fn from_string(x : &str) -> Result<Input, ()> {
		let v = x.split_whitespace().collect::<Vec<&str>>();
		println!("{:?}", v);
		println!("{}", v.len());
		if v.len() != 5 && v.len() != 7 {
			return Err(());
		}
		let age = match v[0].parse::<u8>() {
			Ok(value) => value,
			Err(_) => return Err(()), 
		};
		println!("1");
		//? operator does this. How?
		let gender = match Gender::new(v[1]) {
			Ok(value) => value,
			Err(_) => return Err(()),
		};
		println!("2");
		let height = match v[2].parse::<u16>() {
			Ok(value) => value,
			Err(_) => return Err(()),
		};
		println!("3");
		let weight = match v[3].parse::<f64>() {
			Ok(value) => value,
			Err(_) => return Err(()),
		};
		println!("4");	
		let fat_percentage = match v[4].parse::<u8>() {
			Ok(value) => value,
			Err(_) => return Err(()),
		};
		println!("5");
		let waist : Option<f64> = match v.get(5) {
			None => None,
			Some(x) => Some(match x.parse::<f64>() {
				Ok(v) => v,
				Err(_) => return Err(()),
			}),
		};
		println!("6");
		let hip : Option<f64> = match v.get(6) {
			None => None,
			Some(x) => Some(match x.parse::<f64>() {
				Ok(v) => v,
				Err(_) => return Err(()),
			}),
		};
		println!("7");
		Ok(Input {
			age,
			gender,
			height,
			weight,
			fat_percentage,
			waist,
			hip,
		})
	}
}
struct Nutrients {

	calcium : usize,
	chromium : usize,
	copper : usize,
	fluoride : usize,
	iodine : usize,
	iron : usize,
	magnesium : usize,
	manganese : usize,
	molybdenum : usize,
	phosphorus : usize,
	selenium : usize,
	zinc : usize,
	potassium : usize,
	sodium : usize,
	chloride : usize,
	

	vitamin_a : usize,
	vitamin_b : usize,
	vitamin_c : usize,
	vitamin_d : usize,
	vitamin_e : usize,
	vitamin_k : usize,
	biotin : usize,
	
	
}

/*
if rda == 1.2*ear {
	alpha = rda/(1.2*w_ave)
}
else {
	alpha = rda/(w_ave + 2*sd_w)
}
*/
impl Nutrients {
	fn from_table_rda(x : Nutrients) -> Nutrients {
		
	}
}

impl User {
	fn get_rda(x : User) -> Nutrients {
		Nutrients::from_table_rda(x.gender, x.age_group)
	}
	fn from_input(input : Input) -> Result<User, ()> {
		//age between 4 and 150
		//height less than 300
		//u8 is max 256
		//height is u16 because it is simpler for calculations
		//u16 as f64 
		//weight less than 600
		//fat_percentage between 0 and 100
		if input.age < 4 || input.age > 150 {
			return Result::Err(());
		}
		if input.height > 300 {
			return Result::Err(());	
		}
		if input.weight > 600.0f64 {
			return Result::Err(());
		}
		if input.fat_percentage > 100u8 {
			return Result::Err(());		
		}

		let (fat_group, age_group) = FatGroup::new(input.age, input.gender, input.fat_percentage);
		Result::Ok(
			User {
				age : input.age,
				height : input.height,
				weight : input.weight,
				gender : input.gender,
				fat_percentage : f64::from(input.fat_percentage).div(100f64),
				bmi : BMI::new(input.weight, input.height),
				fat_group,
				age_group,
				cardiovascular_risk : CardiovascularRisk::new(input.gender, input.waist, input.hip),
				hip : input.hip,
				waist : input.waist,
			}
		)
	}
}

#[derive(Debug, Copy, Clone)]
enum AgeGroup {
	Baby,
	Toddler,
	Child,

	EarlyTeen,
	MidTeen,
	LateTeen,

	EarlyTwenties,
	MidTwenties,
	LateTwenties,
	
	Thirties,
	Fourties,
	Fifties,

	Elderly,
}

#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
enum AgeGroupPrivate {
	TwentiesOrLess,

	Thirties,
	Fourties,
	Fifties,

	Elderly,	
}
impl AgeGroupPrivate {
	fn from_age_group(x : AgeGroup) -> Option<AgeGroupPrivate> {
		use crate::AgeGroup::*;
		use crate::AgeGroupPrivate::*;
		match x {
			Baby | Toddler => None, 
			Child | EarlyTeen | MidTeen | LateTeen | EarlyTwenties | MidTwenties | LateTwenties => Some(TwentiesOrLess),
			AgeGroup::Thirties => Some(AgeGroupPrivate::Thirties),
			AgeGroup::Fourties => Some(AgeGroupPrivate::Fourties),
			AgeGroup::Fifties => Some(AgeGroupPrivate::Fifties),
			AgeGroup::Elderly => Some(AgeGroupPrivate::Elderly),
		}
	}
}
impl AgeGroup {
	fn new(age : u8) -> AgeGroup {
		use crate::AgeGroup::*;
		match age {
			x if x <= 2 => Baby,
			x if x <= 5 => Toddler,
			x if x <= 9 => Child,

			x if x <= 14 => EarlyTeen,
			x if x <= 17 => MidTeen,
			x if x <= 19 => LateTeen,

			x if x <= 24 => EarlyTwenties,
			x if x <= 27 => MidTwenties,
			x if x <= 29 => LateTwenties,

			x if x <= 39 => Thirties,
			x if x <= 49 => Fourties,
			x if x <= 59 => Fifties,

			_ => Elderly,

		}
	}
	fn is_allowed(&self) -> bool {
		use crate::AgeGroup::*;
		match self {
			Baby | Toddler => false,
			_ => true,
		}
	}
}


#[derive(Debug, Copy, Clone)]
enum FatGroup {
	DangerouslyLow,
	Excellent,
	Good,
	Fair,
	High,
	DangerouslyHigh,
}

const FEMALE_FAT_TWENTIES_OR_LESS : [f64; 5] = [0.14f64, 16.5f64, 19.4f64, 22.7f64, 27.1f64];
const FEMALE_FAT_THIRTIES         : [f64; 5] = [0.14f64, 17.4f64, 20.8f64, 24.6f64, 29.2f64];
const FEMALE_FAT_FOURTIES         : [f64; 5] = [0.14f64, 19.8f64, 23.8f64, 27.6f64, 31.9f64];
const FEMALE_FAT_FIFTIES          : [f64; 5] = [0.14f64, 22.5f64, 27.0f64, 30.4f64, 34.5f64];
const FEMALE_FAT_ELDERLY          : [f64; 5] = [0.14f64, 23.2f64, 27.9f64, 31.3f64, 35.4f64];

const MALE_FAT_TWENTIES_OR_LESS : [f64; 5] = [0.8f64, 10.5f64, 14.8f64, 18.6f64, 23.1f64];
const MALE_FAT_THIRTIES         : [f64; 5] = [0.8f64, 14.5f64, 18.2f64, 21.3f64, 24.9f64];
const MALE_FAT_FOURTIES         : [f64; 5] = [0.8f64, 17.4f64, 20.6f64, 23.4f64, 26.6f64];
const MALE_FAT_FIFTIES          : [f64; 5] = [0.8f64, 19.1f64, 22.1f64, 24.6f64, 27.8f64];
const MALE_FAT_ELDERLY          : [f64; 5] = [0.8f64, 19.7f64, 22.6f64, 25.2f64, 28.4f64];


impl FatGroup {

	fn new(age : u8, gender : Gender, fat_percentage : u8) -> (Option<FatGroup>, AgeGroup) {
		use crate::FatGroup::*;
		use crate::Gender::*;

		let age_group = AgeGroup::new(age);

		let age_group_private = match AgeGroupPrivate::from_age_group(age_group) {
			None => return (None, age_group),
			Some(x) => x,
		};
		
		let v = match (gender, age_group_private) {
			(Male, AgeGroupPrivate::TwentiesOrLess) => MALE_FAT_TWENTIES_OR_LESS,
			(Male, AgeGroupPrivate::Thirties) => MALE_FAT_THIRTIES,
			(Male, AgeGroupPrivate::Fourties) => MALE_FAT_FOURTIES,
			(Male, AgeGroupPrivate::Fifties) => MALE_FAT_FIFTIES,
			(Male, AgeGroupPrivate::Elderly) => MALE_FAT_ELDERLY,
			
			(Female, AgeGroupPrivate::TwentiesOrLess) => FEMALE_FAT_TWENTIES_OR_LESS,
			(Female, AgeGroupPrivate::Thirties) => FEMALE_FAT_THIRTIES,
			(Female, AgeGroupPrivate::Fourties) => FEMALE_FAT_FOURTIES,
			(Female, AgeGroupPrivate::Fifties) => FEMALE_FAT_FIFTIES,
			(Female, AgeGroupPrivate::Elderly) => FEMALE_FAT_ELDERLY,
		};		
		
		match f64::div(fat_percentage.into(), 100f64) {
			x if x <= v[0] => (Some(DangerouslyLow), age_group),
			x if x <= v[1] => (Some(Excellent), age_group),
			x if x <= v[2] => (Some(Good), age_group),
			x if x <= v[3] => (Some(Fair), age_group),
			x if x <= v[4] => (Some(High), age_group),
			_ => (Some(DangerouslyHigh), age_group),
		}
	}
}

#[derive(Debug, Copy, Clone)]
enum Gender {
	Male,
	Female,
}
impl Gender {
	fn new(x : &str) -> Result<Gender, ()> {
		println!("{}", x.to_lowercase().as_str());
		match x.to_lowercase().as_str() {
			"male" => {
				Result::Ok(Gender::Male)
			},
			"female" => {
				Result::Ok(Gender::Female)
			},
			_ => {
				Result::Err(())
			},
		}
	}
}


#[derive(Debug)]
enum BMIGroup {
	SeverlyThin(f64),
	Underweight(f64),
	Normal(f64),
	Overweight(f64),
	Obese(f64),
	MorbidlyObese(f64),
}
impl BMIGroup {
	fn classify(v : f64) -> BMIGroup {
		use crate::BMIGroup::*;
		match v {
			x if x <= 15.9 => SeverlyThin(v),
			x if x <= 18.5 => Underweight(v),
			x if x <= 24.9 => Normal(v),
			x if x <= 29.9 => Overweight(v),
			x if x <= 39.9 => Obese(v),
			_ => MorbidlyObese(v),
		}
	}
}

#[derive(Debug)]
enum CardiovascularRisk {
	Low,
	Moderate,
	High,
}
impl CardiovascularRisk {
	fn classify(gender : Gender, ratio : f64) -> CardiovascularRisk {
		match gender {
			Gender::Male => {
				match ratio {
					v if v < 0.9f64 => CardiovascularRisk::Low,
					v if v <= 0.99f64 => CardiovascularRisk::Moderate,
					_ => CardiovascularRisk::High,
				}
			},
			Gender::Female => {
				match ratio {
					v if v < 0.8f64 => CardiovascularRisk::Low,
					v if v <= 0.89 => CardiovascularRisk::Moderate,
					_ => CardiovascularRisk::High,
				}
			},	
		}
	}
	fn new(gender : Gender, waist : Option<f64>, hip : Option<f64>) -> Option<CardiovascularRisk> {
		match waist {
			None => None,
			Some(w) => {
				match hip {
					None => None,
					Some(h) => Some(CardiovascularRisk::classify(gender, w.div(h))),
				}
			},
		}
	}
}

#[derive(Debug)]
struct BMI {
	old : BMIGroup,
	new : BMIGroup, //trefethen https://people.maths.ox.ac.uk/trefethen/bmi.html
}
impl BMI {
	fn new(weight : f64, height : u16) -> BMI {
		BMI {
			old : BMIGroup::classify( weight.div((f64::from(height).div(100f64)).powf(2f64)) ),
			new : BMIGroup::classify(	 1.3f64.mul(weight.div((f64::from(height).div(100f64)).powf(2.5f64))) ),
		}
	}
}



fn main() {
	let data = "";
	let i = Input::from_string(data).unwrap();
	println!("{:#?}", i);
	let u = User::from_input(i).unwrap();
	println!("{:?}", u);
	let nutrients = User::get_rda();
	let 
}



//////////////////////////////////////////////////////

/*


struct NutrientNeed {
calcium : u16,
chromium : u16,
copper : u16,
fluoride : u16,
iodine : u16,
iron : u16,
magnesium : u16,
manganese : u16,
molybdenum : u16,
phosphorus : u16,
selenium : u16,
zinc : u16,
potassium : u16,
sodium : u16,
chloride : u16,
vitamin_a : u16,
vitamin_c : u16,
vitamin_d : u16,
vitamin_e : u16,
vitamin_k : u16,
thiamin : u16,
riboflavin : u16,
niacin : u16,
vitamin_b6 : u16,
folate : u16,
vitamin_b12 : u16,
pantothenic_acid : u16,
biotin : u16,
choline : u16,
}


rda_19_to_30 = {
"calcium" : 1_000_000,
"chromium" : 35,
"copper" : 900,
"fluoride" : 0,
"iodine" : 150,
"iron" : 8_000,
"magnesium" : 400_000,
"manganese" : 2_300,
"molybdenum" : 45,
"phosphorus" : 700_000,
"selenium" : 55,
"zinc" : 11_000,
"potassium" : 3_400_000,
"sodium" : 1_500_000,
"chloride" : 2_300_000,
"vitamin a" : 900,
"vitamin c" : 90_000,
"vitamin d" : 0,
"vitamin E" : 15_000,
"vitamin K" : 120,
"thiamin" : 1_200,
"riboflavin" : 1_300,
"niacin" : 16_000,
"vitamin b6" : 1_300,
"folate" : 400,
"vitamin b12" : 2.4,
"pantothenic acid" : 5_000,
"biotin" : 30,
"choline" : 550_000,
}

impl User {
	
	fn new(age : u8, gender : Gender, height : u8, weight : f64, fat_percentage : f64) -> User {
		assert(height < 300);
		assert(height > 50);
		assert!(weight.is_numeric());
		assert!(weight > 1.0); // babies cannot use the scale
		assert!(age > 4); //children should seek a dietician
		assert!(fat_percentage > 0.0 && fat_percentage < 100.0);
		User {
			age,
			gender,
			height,
			weight,
			fat_percenteage,
		}
	}
	fn from_toml(s : Vec<u8>) -> Option<User> {
		struct AuxUser {
			age : Option<Vec<u8>>,
			gender : Option<Vec<u8>>,
			height : Option<Vec<u8>>,
			weight : Option<Vec<u8>>,
			fat_percentage : Option<Vec<u8>>,
		}
		impl AuxUser {
			fn empty() -> AuxUser {
				AuxUser {
					age : Option::None,
					gender : Option::None,
					height : Option::None,
					weight : Option::None,
					fat_percentage : Option::None,
				}
			}
		}
		enum Read {
			Field,
			Value,
			Done,
		}

		let r = Read::Field;
		let mut field : &[u8] = [];
		let mut value : &[u8] = [];
		let mut start = 0usize;
		for (c, i) in x.enumerate() {
			match (c, r) {
				(b' ', Field) => {},
				(b' ', Value) => {
					field = &x[start, i]
				},
				(b' ', Done) => {
					value = &x[start, i]
				},
				
				(b'\n', Field) => {},
				(b'\n', Value) => {},
				(b'\n', Done) => {},
				
				(c, Field) if c.is_ascii_alphanumeric() => {},
				(c, Value) if c.is_ascii_alphanumeric() => {},
				(c, Done) if c.is_ascii_alphanumeric() => {},
				
				(c, Field) if c.is_ascii_digit() => {},
				(c, Value) if c.is_ascii_digit() => {},
				(c, Done) if c.is_ascii_digit() => {},
				(_, _)  => {},
								
						
			}
		}
		let aux_user = AuxUser::empty();
	}
	
}


use std::fs;
use std::io::prelude::*;
use std::net::TcpListener;
use std::net::TcpStream;

fn set_fat() {
	let male = fs::read_to_string("male_fat_percentages").unwrap();
	for line in male.lines().collect::<Vec<String>>()[1:] {
		let v [f64; 5] = line.split_whitespace()[1:].collect::<Vec<f64>>();
		
	}

}

fn main() {
	get_rda();
	//set_fat();
    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();

    for stream in listener.incoming() {
        let stream = stream.unwrap();

        handle_connection(stream);
    }
}



fn handle_connection(mut stream: TcpStream) {
	//24 bytes for longest input
	let mut buffer = [0u8; 1024];
	stream.read(&mut buffer).unwrap();
	let get_requirements = b"POST /get_requirements HTTP/1.1\r\n";
	let get_food = b"POST /get_food_combination HTTP/1.1\r\n";
	let 
	let (status_line, filename) = if buffer.starts_with(get) {
		("HTTP/1.1 200 OK", "hello.html")
    	} else {
		("HTTP/1.1 404 NOT FOUND", "404.html")
	}
    let contents = fs::read_to_string(filename).unwrap();

    let response = format!(
        "{}\r\nContent-Length: {}\r\n\r\n{}",
        status_line,
        contents.len(),
        contents
    );

    stream.write(response.as_bytes()).unwrap();
    stream.flush().unwrap();
}

*/
